/* automatically generated by rust-bindgen 0.70.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub type wchar_t = ::core::ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::core::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::core::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::core::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_slice {
    pub len: usize,
    pub ptr: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rt_slice"][::core::mem::size_of::<rt_slice>() - 16usize];
    ["Alignment of rt_slice"][::core::mem::align_of::<rt_slice>() - 8usize];
    ["Offset of field: rt_slice::len"][::core::mem::offset_of!(rt_slice, len) - 0usize];
    ["Offset of field: rt_slice::ptr"][::core::mem::offset_of!(rt_slice, ptr) - 8usize];
};
pub type rt_objid = __uint128_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct duration {
    pub seconds: u64,
    pub nanos: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of duration"][::core::mem::size_of::<duration>() - 16usize];
    ["Alignment of duration"][::core::mem::align_of::<duration>() - 8usize];
    ["Offset of field: duration::seconds"][::core::mem::offset_of!(duration, seconds) - 0usize];
    ["Offset of field: duration::nanos"][::core::mem::offset_of!(duration, nanos) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option_i32 {
    pub is_some: i32,
    pub value: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of option_i32"][::core::mem::size_of::<option_i32>() - 8usize];
    ["Alignment of option_i32"][::core::mem::align_of::<option_i32>() - 4usize];
    ["Offset of field: option_i32::is_some"][::core::mem::offset_of!(option_i32, is_some) - 0usize];
    ["Offset of field: option_i32::value"][::core::mem::offset_of!(option_i32, value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option_duration {
    pub dur: duration,
    pub is_some: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of option_duration"][::core::mem::size_of::<option_duration>() - 24usize];
    ["Alignment of option_duration"][::core::mem::align_of::<option_duration>() - 8usize];
    ["Offset of field: option_duration::dur"]
        [::core::mem::offset_of!(option_duration, dur) - 0usize];
    ["Offset of field: option_duration::is_some"]
        [::core::mem::offset_of!(option_duration, is_some) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basic_aux {
    pub argc: usize,
    pub args: *mut *mut ::core::ffi::c_char,
    pub env: *mut *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basic_aux"][::core::mem::size_of::<basic_aux>() - 24usize];
    ["Alignment of basic_aux"][::core::mem::align_of::<basic_aux>() - 8usize];
    ["Offset of field: basic_aux::argc"][::core::mem::offset_of!(basic_aux, argc) - 0usize];
    ["Offset of field: basic_aux::args"][::core::mem::offset_of!(basic_aux, args) - 8usize];
    ["Offset of field: basic_aux::env"][::core::mem::offset_of!(basic_aux, env) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basic_return {
    pub code: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of basic_return"][::core::mem::size_of::<basic_return>() - 4usize];
    ["Alignment of basic_return"][::core::mem::align_of::<basic_return>() - 4usize];
    ["Offset of field: basic_return::code"][::core::mem::offset_of!(basic_return, code) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct runtime_info {
    pub flags: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of runtime_info"][::core::mem::size_of::<runtime_info>() - 4usize];
    ["Alignment of runtime_info"][::core::mem::align_of::<runtime_info>() - 4usize];
    ["Offset of field: runtime_info::flags"][::core::mem::offset_of!(runtime_info, flags) - 0usize];
};
extern "C-unwind" {
    pub fn twz_rt_exit(code: i32);
}
extern "C-unwind" {
    pub fn twz_rt_abort();
}
extern "C-unwind" {
    pub fn twz_rt_pre_main_hook() -> option_i32;
}
extern "C-unwind" {
    pub fn twz_rt_post_main_hook();
}
extern "C-unwind" {
    pub fn twz_rt_runtime_entry(
        arg: *const runtime_info,
        std_entry: ::core::option::Option<
            unsafe extern "C-unwind" fn(arg1: basic_aux) -> basic_return,
        >,
    );
}
extern "C-unwind" {
    pub fn available_parallelism() -> u64;
}
extern "C-unwind" {
    pub fn futex_wait(ptr: *mut u32, expected: u32, timeout: option_duration) -> bool;
}
extern "C-unwind" {
    pub fn futex_wake_one(ptr: *mut u32) -> bool;
}
extern "C-unwind" {
    pub fn futex_wake_all(ptr: *mut u32);
}
extern "C-unwind" {
    pub fn yield_now();
}
extern "C-unwind" {
    pub fn set_name(name: *const ::core::ffi::c_char);
}
extern "C-unwind" {
    pub fn sleep(dur: duration);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tls_index {
    pub mod_id: usize,
    pub offset: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tls_index"][::core::mem::size_of::<tls_index>() - 16usize];
    ["Alignment of tls_index"][::core::mem::align_of::<tls_index>() - 8usize];
    ["Offset of field: tls_index::mod_id"][::core::mem::offset_of!(tls_index, mod_id) - 0usize];
    ["Offset of field: tls_index::offset"][::core::mem::offset_of!(tls_index, offset) - 8usize];
};
extern "C-unwind" {
    pub fn tls_get_addr(index: tls_index) -> *mut ::core::ffi::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spawn_args {
    pub stack_size: usize,
    pub start: usize,
    pub arg: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spawn_args"][::core::mem::size_of::<spawn_args>() - 24usize];
    ["Alignment of spawn_args"][::core::mem::align_of::<spawn_args>() - 8usize];
    ["Offset of field: spawn_args::stack_size"]
        [::core::mem::offset_of!(spawn_args, stack_size) - 0usize];
    ["Offset of field: spawn_args::start"][::core::mem::offset_of!(spawn_args, start) - 8usize];
    ["Offset of field: spawn_args::arg"][::core::mem::offset_of!(spawn_args, arg) - 16usize];
};
pub const spawn_error_Spawn_Success: spawn_error = 0;
pub const spawn_error_Spawn_Other: spawn_error = 1;
pub const spawn_error_Spawn_InvalidArgument: spawn_error = 2;
pub const spawn_error_Spawn_ObjectNotFound: spawn_error = 3;
pub const spawn_error_Spawn_PermissionDenied: spawn_error = 4;
pub const spawn_error_Spawn_KernelError: spawn_error = 5;
pub type spawn_error = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spawn_result {
    pub id: u32,
    pub err: spawn_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spawn_result"][::core::mem::size_of::<spawn_result>() - 8usize];
    ["Alignment of spawn_result"][::core::mem::align_of::<spawn_result>() - 4usize];
    ["Offset of field: spawn_result::id"][::core::mem::offset_of!(spawn_result, id) - 0usize];
    ["Offset of field: spawn_result::err"][::core::mem::offset_of!(spawn_result, err) - 4usize];
};
extern "C-unwind" {
    pub fn spawn(args: spawn_args) -> spawn_result;
}
pub const join_result_Join_Success: join_result = 0;
pub const join_result_Join_ThreadNotFound: join_result = 1;
pub const join_result_Join_Timeout: join_result = 2;
pub type join_result = ::core::ffi::c_uint;
extern "C-unwind" {
    pub fn join(id: u32, timeout: option_duration) -> join_result;
}
pub type __uint128_t = u128;
